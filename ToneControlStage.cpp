#include "ToneControlStage.h"

MyMat_TC PrepareToneCTLStage(double sampleRate) //imposing 192 KHz
{
    //parameters of circuit

    float Ts = 1 / sampleRate;

    //parameters of circuit

    float C14 = 3.9e-9;

    float Rs = 1e-3;
    float R21 = 1.8e3;
    float R22 = 100e3;
    float R23 = 4.7e3;
    float R24 = 100e3;
    float R_pos = 5e3;
    float R_neg = 5e3;

    //float V_gnd = 4.5;
    float R_gnd = 1e-3;



    //WDF analysis

    float Z_S1 = R21 + R_neg;
    float Z_S2 = R23 + R_pos;

    float Z1 = Rs;
    float Z2 = R22;
    float Z3 = Z_S1;
    float Z4 = Z_S2;
    float Z5 = Ts / (2 * C14);
    float Z6 = R24;
    float Z7 = R_gnd;

    Matrix<float, 3, 7> B_i;
    B_i << 1, 0, 1, -1, 0, 0, 0,
           0, -1, -1, 0, 1, 0, 0,
           0, 1, 1, -1, 0, 1, 0;
    //std::cout << "B_i: " << B_i << std::endl;

    Matrix<float, 7, 3> B_i_T = B_i.transpose();
    //std::cout << "B_i_T: " << B_i_T << std::endl;

    Matrix<float, 3, 7> B_v;
    B_v << 1,-1, 0, 0, 0, 0,-1,
           0,-1,-1, 0, 1, 0, 0,
           0, 1, 1,-1, 0, 1, 0;
    //std::cout << "B_v: " << B_v << std::endl;

    //Matrix<float, 7, 3> B_v_T = B_v.transpose();
    //std::cout << "B_v_T: " << B_v_T << std::endl;


    //diagonal matrix
    //create a diagonal matrix out of a vector
    Matrix <float, 7, 1> vector1;
    vector1 << Z1, Z2, Z3, Z4, Z5, Z6, Z7;
    MatrixXf Z;
    Z = vector1.asDiagonal();
    //std::cout << " Diagonal matrix is \n\n" << Z << std::endl;


    //identity matrix
    int rowNumber = 7;
    int columnNumber = 7;
    MatrixXf I;
    I = MatrixXf::Identity(rowNumber, columnNumber);
    //std::cout << " Identity matrix is \n\n" << I << std::endl;


    Matrix<float, 7, 7> S;
    S = (I - 2 * Z * B_i_T * ((B_v * Z * B_i_T).inverse()) * B_v);
    //std::cout << "S tone control: \n" << S << std::endl;
    return S;

}

MyMat_TC PrepareToneCTLStage_Knob(TC_Data& T_d, float treble_knob) //imposing 192KHz s.r.
{


    Matrix<float, 3, 7> B_i; //non riesco a inizializzarle nello struct
    B_i << 1, 0, 1, -1, 0, 0, 0,
           0, -1, -1, 0, 1, 0, 0,
           0, 1, 1, -1, 0, 1, 0;

    Matrix<float, 7, 3> B_i_T = B_i.transpose();

    Matrix<float, 3, 7> B_v;
    B_v << 1,-1, 0, 0, 0, 0,-1,
           0,-1,-1, 0, 1, 0, 0,
           0, 1, 1,-1, 0, 1, 0;

    //update resistances associated with the potentiometer
    T_d.R_pos = 10e3 * treble_knob;
    T_d.R_neg = 10e3 - T_d.R_pos;

    T_d.Z1_S1 = T_d.R21 + T_d.R_neg;
    T_d.Z1_S2 = T_d.R23 + T_d.R_pos;

    T_d.Z3 = T_d.Z1_S1;
    T_d.Z4 = T_d.Z1_S2;


    //update Z
    T_d.vectorZ = {T_d.Z1, T_d.Z2, T_d.Z3, T_d.Z4, T_d.Z5, T_d.Z6, T_d.Z7};
    T_d.Z = T_d.vectorZ.asDiagonal();


    //update scattering matrices
    T_d.alpha_S1 = 2 * T_d.Z3_S1 / (T_d.Z1_S1 + T_d.Z2_S1 + T_d.Z3_S1);
    T_d.S_S1_2 = {-1 + T_d.alpha_S1, T_d.alpha_S1, -1 + T_d.alpha_S1};
    T_d.S_S1_3 = {-T_d.alpha_S1, -T_d.alpha_S1, 1 - T_d.alpha_S1};

    T_d.alpha_S2 = 2 * T_d.Z3_S2 / (T_d.Z1_S2 + T_d.Z2_S2 + T_d.Z3_S2);
    T_d.S_S2_2 = {-1 + T_d.alpha_S2, T_d.alpha_S2, -1 + T_d.alpha_S2};
    T_d.S_S2_3 = { -T_d.alpha_S2, -T_d.alpha_S2, 1 - T_d.alpha_S2};


    //Matrix<float, 7, 7> S;
    //S = (T_d.I - 2 * T_d.Z * B_i_T * ((B_v * T_d.Z * B_i_T).inverse()) * B_v);
    //std::cout << "S tone control: \n" << S << std::endl;


    Matrix<float, 7,7> S;
    if(treble_knob < 0.5) // k = 0.25
        S << 0.99999976464709317003,1.99999976464709305901,-2.00278205541525133881,1.58054160843957069993,-0.00278229076815814666,1.58332389920772897973,0.00000000000000000000,0.00000002132489801226,-0.99999997867510237448,0.01232155349723851670,-0.14239935848981535860,0.01232157482213641977,-0.15472093331195205246,0.00000000000000000000,-0.00000021402800881865,-0.00000021402800931829,-0.99046050191801282558,1.43814224994975536909,0.00953928405397827354,1.42860296589577706605,0.00000000000000000000,0.00000000132490036579,0.00000000132490047579,0.01232157352505931606,0.85760062570476836008,0.01232157484995932695,1.84527905085480914416,0.00000000000000000000,0.00000021270310845286,0.00000021270310884250,1.97813892839295335513,-1.29574287565452372917,0.97813914109606237002,-3.27388201675058621021,0.00000000000000000000,-0.00000000132490036579,-0.00000000132490047579,-0.01232157352505931606,0.14239937429523161216,-0.01232157484995932695,-0.84527905085480914416,0.00000000000000000000,0.00000023535290683091,-1.99999976464709305901,2.00278205541525133881,-1.58054160843957069993,0.00278229076815814666,-1.58332389920772897973,1.00000000000000000000;
     else if(treble_knob == 0.5)
        S << 0.99999968663478722153,1.99999968663478733255,-1.99488346853698716998,2.77132072705914378474,0.00511621809780018859,2.76620450896134384422,0.00000000000000000000,0.00000002176421000352,-0.99999997823579023226,0.01199662950390533063,-0.19138483305482320573,0.01199665126811466989,-0.20338148432293753909,0.00000000000000000000,-0.00000029160100282415,-0.00000029160100271659,-0.98288683903308204926,2.57993589400432066228,0.01711286936591485675,2.56282302463840627738,0.00000000000000000000,0.00000000176421313717,0.00000000176421343626,0.01199664945273938403,0.80861513923197025910,0.01199665121695248603,1.79661848801501777828,0.00000000000000000000,0.00000028983678968698,0.00000028983678928033,1.97089018958034256634,-2.38855103323629114342,0.97089047941713269019,-4.35944151265342405566,0.00000000000000000000,-0.00000000176421313717,-0.00000000176421343626,-0.01199664945273938403,0.19138486076802979641,-0.01199665121695248603,-0.79661848801501777828,0.00000000000000000000,0.00000031336521282767,-1.99999968663478733255,1.99488346853698716998,-2.77132072705914378474,-0.00511621809780018859,-2.76620450896134384422,1.00000000000000000000;
     else // k = 0.75
        S << 0.99999951985576995828,1.99999951985577073543,-1.97862020995518772537,5.22314428046749412715,0.02137930990058187902,5.20176497056691289345,0.00000000000000000000,0.00000002270623695812,-0.99999997729376355338,0.01163681989630543576,-0.24562958653441593904,0.01163684260254276188,-0.25726642913695946246,0.00000000000000000000,-0.00000045743799311373,-0.00000045743799271744,-0.96698339005888245268,4.97751469393307832689,0.03301615250312463917,4.94449854142995359751,0.00000000000000000000,0.00000000270624175957,0.00000000270624214498,0.01163683968250794204,0.75437036123414080713,0.01163684238874965887,1.74273351884539118295,0.00000000000000000000,0.00000045473175135416,0.00000045473175057245,1.95534655037637428165,-4.73188505516721935606,0.95534700510812564644,-6.68723206027534455842,0.00000000000000000000,-0.00000000270624175957,-0.00000000270624214498,-0.01163683968250794204,0.24562963876585916512,-0.01163684238874965887,-0.74273351884539118295,0.00000000000000000000,0.00000048014423007186,-1.99999951985577073543,1.97862020995518772537,-5.22314428046749412715,-0.02137930990058187902,-5.20176497056691289345,1.00000000000000000000;

    return S.transpose();

}


float ToneCTLStageSample(const float inputSample, const MyMat_TC& S, TC_Data& TC_d)
{

    TC_d.a[0] = inputSample;
    TC_d.a[4] = TC_d.b[4];
    TC_d.a[6] = 4.5;

    // S1

    TC_d.b_S1[0] = TC_d.S_S1_1 * TC_d.a_S1;

    // S2

    TC_d.b_S2[0] = TC_d.S_S2_1 * TC_d.a_S2;


    //waves reflected from series adaptors, incident toward S

    TC_d.a[2] = TC_d.b_S1[0];
    TC_d.a[3] = TC_d.b_S2[0];

    // Scattering stage
    TC_d.b = S * TC_d.a;


    // Backward Scan

    // S1
    TC_d.a_S1[0] = TC_d.b[2]; // from S
    TC_d.b_S1[1] = TC_d.S_S1_2 * TC_d.a_S1;
    TC_d.b_S1[2] = TC_d.S_S1_3 * TC_d.a_S1;

    // S2
    TC_d.a_S2[0] = TC_d.b[3]; // from S
    TC_d.b_S2[1] = TC_d.S_S2_2 * TC_d.a_S2;
    TC_d.b_S2[2] = TC_d.S_S2_3 * TC_d.a_S2;

    double outputSample =(-(TC_d.a[5] + TC_d.b[5] - (TC_d.a[6] + TC_d.b[6])) / 2);
    return outputSample;

}

MyMat_TC_9x9 PrepareToneCTLStage_Knob_9x9(const float treble_knob)
{
    MyMat_TC_9x9 S;
    if(treble_knob < 0.5) // a = 0.25
        S << 0.99999976464709317003,1.99999976464709305901,-0.38763523653198411756,-1.61514681888326716575,-0.54879916959707319979,1.03174243884249761116,-0.00278229076815814666,1.58332389920772897973,0.00000000000000000000,0.00000002132489801226,-0.99999997867510237448,0.00238481680591713218,0.00993673669132138365,0.04944422169785255006,-0.09295513679196279466,0.01232157482213641977,-0.15472093331195205246,0.00000000000000000000,-0.00000021402800881865,-0.00000021402800931829,0.61474958027393300508,-1.60521008219194571964,-0.49935494789922063585,0.93878730205053473323,0.00953928405397827354,1.42860296589577706605,0.00000000000000000000,-0.00000021402800881865,-0.00000021402800931829,-0.38525041972606699492,-0.60521008219194571964,-0.49935494789922063585,0.93878730205053473323,0.00953928405397827354,1.42860296589577706605,0.00000000000000000000,-0.00000000132490036579,-0.00000000132490047579,-0.00238482068226954485,-0.00993675284278977035,0.95055577281415570834,0.09295514710938729275,-0.01232157484995932695,-1.84527905085480914416,0.00000000000000000000,0.00000000132490036579,0.00000000132490047579,0.00238482068226954485,0.00993675284278977035,0.04944422718584430554,0.90704485289061276276,0.01232157484995932695,1.84527905085480914416,0.00000000000000000000,0.00000021270310845286,0.00000021270310884250,0.38286559904379741104,1.59527332934915588858,0.44991072071337628868,-0.84583215494114749600,0.97813914109606237002,-3.27388201675058621021,0.00000000000000000000,-0.00000000132490036579,-0.00000000132490047579,-0.00238482068226954485,-0.00993675284278977035,-0.04944422718584430554,0.09295514710938729275,-0.01232157484995932695,-0.84527905085480914416,0.00000000000000000000,0.00000023535290683091,-1.99999976464709305901,0.38763523653198411756,1.61514681888326716575,0.54879916959707319979,-1.03174243884249761116,0.00278229076815814666,-1.58332389920772897973,1.00000000000000000000;
    else if(treble_knob == 0.5)
        S << 0.99999968663478722153,1.99999968663478733255,-0.52805738873037899594,-1.46682607980660817404,-1.42851583869028031515,1.34280488836886369164,0.00511621809780018859,2.76620450896134384422,0.00000000000000000000,0.00000002176421000352,-0.99999997823579023226,0.00317557839809258762,0.00882105110581274388,0.09865197580145525225,-0.09273285725336793961,0.01199665126811466989,-0.20338148432293753909,0.00000000000000000000,-0.00000029160100282415,-0.00000029160100271659,0.47511818966771357520,-1.45800502870079551343,-1.32986386288882507678,1.25007203111549558550,0.01711286936591485675,2.56282302463840627738,0.00000000000000000000,-0.00000029160100282415,-0.00000029160100271659,-0.52488181033228642480,-0.45800502870079551343,-1.32986386288882507678,1.25007203111549558550,0.01711286936591485675,2.56282302463840627738,0.00000000000000000000,-0.00000000176421313717,-0.00000000176421343626,-0.00317558367866630767,-0.00882106577407307593,0.90134800991338670517,0.09273287068141650158,-0.01199665121695248603,-1.79661848801501777828,0.00000000000000000000,0.00000000176421313717,0.00000000176421343626,0.00317558367866630767,0.00882106577407307593,0.09865199008661329483,0.90726712931858344291,0.01199665121695248603,1.79661848801501777828,0.00000000000000000000,0.00000028983678968698,0.00000028983678928033,0.52170622665362009762,1.44918396292672246872,1.23121187280221189297,-1.15733916043407925045,0.97089047941713269019,-4.35944151265342405566,0.00000000000000000000,-0.00000000176421313717,-0.00000000176421343626,-0.00317558367866630767,-0.00882106577407307593,-0.09865199008661329483,0.09273287068141650158,-0.01199665121695248603,-0.79661848801501777828,0.00000000000000000000,0.00000031336521282767,-1.99999968663478733255,0.52805738873037899594,1.46682607980660817404,1.42851583869028031515,-1.34280488836886369164,-0.00511621809780018859,-2.76620450896134384422,1.00000000000000000000;
    else // a = 0.75
        S << 0.99999951985576995828,1.99999951985577073543,-0.82825962277193909689,-1.15036058718324873951,-3.21094935274641057887,2.01219492772108399237,0.02137930990058187902,5.20176497056691289345,0.00000000000000000000,0.00000002270623695812,-0.99999997729376355338,0.00487122693333715863,0.00676559296296827626,0.15100179500066554517,-0.09462779153375040775,0.01163684260254276188,-0.25726642913695946246,0.00000000000000000000,-0.00000045743799311373,-0.00000045743799271744,0.17661160416139809470,-1.14359499422028054738,-3.05994755774574489493,1.91756713618733343196,0.03301615250312463917,4.94449854142995359751,0.00000000000000000000,-0.00000045743799311373,-0.00000045743799271744,-0.82338839583860190530,-0.14359499422028054738,-3.05994755774574489493,1.91756713618733343196,0.03301615250312463917,4.94449854142995359751,0.00000000000000000000,-0.00000000270624175957,-0.00000000270624214498,-0.00487123521593355729,-0.00676560446657438475,0.84899817288984069652,0.09462781165569984776,-0.01163684238874965887,-1.74273351884539118295,0.00000000000000000000,0.00000000270624175957,0.00000000270624214498,0.00487123521593355729,0.00676560446657438475,0.15100182711015933124,0.90537218834430011061,0.01163684238874965887,1.74273351884539118295,0.00000000000000000000,0.00000045473175135416,0.00000045473175057245,0.81851716062266832719,1.13682938975370606549,2.90894573063558592452,-1.82293932453163365359,0.95534700510812564644,-6.68723206027534455842,0.00000000000000000000,-0.00000000270624175957,-0.00000000270624214498,-0.00487123521593355729,-0.00676560446657438475,-0.15100182711015933124,0.09462781165569984776,-0.01163684238874965887,-0.74273351884539118295,0.00000000000000000000,0.00000048014423007186,-1.99999951985577073543,0.82825962277193909689,1.15036058718324873951,3.21094935274641057887,-2.01219492772108399237,-0.02137930990058187902,-5.20176497056691289345,1.00000000000000000000;
    return S.transpose();
}

float ToneCTLStageSample_9x9(const float inputSample, const MyMat_TC_9x9& S, TC_Data_9x9& TC_d)
{
    TC_d.a[0] = inputSample;
    TC_d.a[6] = TC_d.b[6];
    TC_d.a[8] = 4.5;

    TC_d.b = S * TC_d.a;

   return (-(TC_d.a[7] + TC_d.b[7] - (TC_d.a[8] + TC_d.b[8]))/2);

}
