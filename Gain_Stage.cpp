#include "Gain_Stage.h"
#include <stdlib.h>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>


using Eigen::MatrixXd;
using namespace Eigen;
using namespace std;

MyMat_G PrepareGainStage(double sampleRate)
{
    //hard coded scattering matrix
    Matrix<double, 21, 21> S;
    S << 0.99999550839289275128,-0.11953448993009221923,-0.03507511382533769900,-1.15497270898452586430,-0.72548517334523621169,-1.88045788232977351129,-0.00000313613298562219,0.34581508221073903320,-0.19636494495144943273,-0.54218002716218649528,-0.52562686005442804671,-1.96142389009518414156,-0.00349650447239692247,-0.00149810942174747599,-1.96342220814224210912,-0.00000007700356614603,1.96342220814224188707,0.24804577843456523945,-1.14009578637066510964,-0.00006888552072268077,-1.07137227720970806821,-0.00000315300184498529,0.88015002108073159270,0.00000054167763478932,-1.59604239631822242274,-0.28410134497676908794,-1.88014374129501615762,-0.00000312678382437963,-0.27655919960856611972,-0.11954121841399846515,0.15701798119456789049,-0.16453474231907022629,0.00003112235176898028,-0.00002851102756968388,0.00000000199094549242,0.00000260933316236503,0.00000000000010233558,-0.00000260933316237232,-0.00000032964589723581,0.00750844592756270274,0.00003976520366030648,-0.00750550694840076797,-0.00000133860526224266,0.00031548898917621587,0.96492434449702746413,0.44106968733369650293,-0.44138382836846712376,-0.00031414103475717098,-0.00000000934916124256,0.62237428181930498639,-0.07682372653745095370,-0.69919800835675460782,-0.36109211773535782042,-1.96145501244695319443,-0.00346799344482723836,-0.00149811141269296801,-1.96342481747540409387,-0.00000007700366848161,1.96342481747540409387,0.24804610808046248516,-1.14760423229822783320,-0.00010865072438298725,-1.06386677026130738177,-0.00000003190095716468,-0.00121334723347741691,0.00000051763068066185,-0.69675455042732270527,-0.30203206641187624326,0.00121338316081894015,-0.00000000402638450250,-0.29400892909669357200,-0.12708434372490276520,0.16692458537179030720,-0.17491741089563253575,0.00002983008798732061,-0.00003031581771106901,-0.00000000037033371795,-0.00000048535937074590,-0.00000000000001903534,0.00000048535937074524,0.00000006131709340852,0.00798032047508764365,0.00004227418998420155,-0.00798086715157084008,-0.00000000570190670170,-0.00021598083734974418,-0.00000051734096419313,-0.30203207469095461057,-0.69775190517337204454,0.00021602013569390157,-0.00000003359643741832,0.29421916254509239419,0.12717522291285315861,-0.16704393963223987396,0.17504250075561963995,-0.00002981451885956768,0.00003033756173038610,0.00000000039878228911,0.00000052264406811121,0.00000000000002049761,-0.00000052264406810289,-0.00000006602739552358,-0.00798600559550198368,-0.00004230441812310859,0.00798659426698612208,-0.00000312110088782061,-0.11863663168579102747,0.00000002404695412562,0.10071215410910058785,0.01793072143510716920,-0.88135712445583513919,-0.00000312275743987713,0.01744972948812764310,0.00754312531090428184,-0.00990660417722237160,0.01038266857656231119,0.00000129226378164244,0.00000180479014138520,0.00000000236127921037,0.00000309469253311165,0.00000000000012137092,-0.00000309469253311659,-0.00000039096299064421,-0.00047187454752494070,-0.00000250898632389509,0.00047536020317007032,-0.00000312680279452231,-0.11885261252314077707,-0.00000049329401006751,-0.20131992058185405048,-1.67982118373826483371,-1.88114110432014136620,0.99999684364612273502,0.31166889203322001300,0.13471834822375744478,-0.17695054380946223516,0.18542516933218194941,-0.00002852225507792524,0.00003214235187177130,0.00000000276006149948,0.00000361733660122286,0.00000000000014186853,-0.00000361733660121948,-0.00000045699038616779,-0.00845788014302692286,-0.00004481340444700369,0.00846195447015619072,-0.00000001197022432031,-0.00045343482492010982,-0.00000107357767705200,-0.63408567700050522120,0.63453911035215337932,0.00045343335164753818,0.00000001344349680954,-0.34095346955604544092,0.27122995852789932858,-0.38781657191605500845,0.36324620910404520346,-0.00006187061580441158,0.00006295616370590297,0.00000000082765161545,0.00000108472020721482,0.00000000000004254170,-0.00000108472020721568,-0.00000013703637814971,0.02437949061928735422,0.00012913778564406991,-0.02437826886265945583,-0.00000001422882614267,-0.00054393157120756291,0.00000210854932190747,-0.76063679873586309554,0.76118072840934258849,0.00054392967347750073,0.00000001612655610628,0.75272537791425930820,0.47451047483434483087,0.72178509692008507859,-0.71320612075529743468,0.00012151522265138864,-0.00012360954314735842,-0.00000000159676762252,-0.00000209272364607323,-0.00000000000008207465,0.00000209272364606171,0.00000026438086708154,-0.00841316454869772863,-0.00004455917753675979,0.00841080744410250061,0.00000000337551873195,0.00012698731027434480,0.00000090433889231350,0.17757973374102595243,-0.17770672066188139548,-0.00012698692085608349,-0.00000000376493696957,-0.19129836599319291479,0.12829058052660982647,-0.68041105348019725874,-0.30594428010815039043,0.00005211713086652793,-0.00005302484527768839,-0.00000000069206646498,-0.00000090702230900816,-0.00000000000003557256,0.00000090702230900731,0.00000011458720073667,-0.01352104334667833356,-0.00007161982924114975,0.01352002173713301447,-0.00000001085330741072,-0.00041694426093321816,0.00000301288821422025,-0.58305706499483711536,0.58347400774746105423,0.00041694275262141724,0.00000001236161913670,0.56142701192106636565,-0.39719894463904537041,-0.95862595656011206913,-0.01915040086344776959,0.00017363235351786944,-0.00017663438842504671,-0.00000000228883408750,-0.00000299974595508136,-0.00000000000011764721,0.00000299974595507062,0.00000037896806781841,-0.02193420789537606219,-0.00011617900677790955,0.02193082918123551509,-0.00000130780133326351,-0.00000466558819212684,-0.03405412996363073319,-0.00663292252830161369,0.00663889577511484353,0.00000597324682718272,0.00000000014269370598,-0.01175962326360933952,0.00201995080442064334,0.01377957406803128476,0.00802473729449924671,-0.96253877005393251309,-0.00340579218111889282,0.00002596480362180562,0.03402947162673844450,0.00000000133460376401,-0.03402947162673843062,-0.00429905842175325962,0.01992792777757297282,0.00000208442409470913,0.01840060360552250515,-0.00000131865464067422,-0.00042160984912534494,-0.03405111707541651211,-0.58968998752313872558,0.59011290352257594893,0.00042291599944859994,0.00000001250431284269,0.54966738865745701226,-0.39517899383462473661,-0.94484638249208074967,-1.01112566356894850728,-1.96236513770041454130,0.99641757343045600503,0.00002596251478771811,0.03402647188078335855,0.00000000133448611680,-0.03402647188078335855,-0.00429867945368544047,-0.00200628011780308807,-0.00011409458268320040,0.04033143278675802024,-0.00000003080392897915,0.00032015457736834271,-0.00102152553934175909,0.44770260986199822417,-0.44802272414358212949,-0.00032011428158435363,-0.00000000949185494854,0.63413390508291433978,-0.07884367734187158749,-0.71297758242478581625,-0.36911685502985708274,0.00108375760697896175,-0.00006220126370834503,0.99847592378368521526,-1.99745428910214273266,-0.00000007833827224562,1.99745428910214251061,0.25234516650221572309,-1.16753216007580085112,-0.00011073514847769635,-1.08226737386682980713,-0.00000003927921547598,-0.00000040620812580288,-0.00102261794064441107,-0.00057130294906461031,0.00057174842423148508,0.00000044547516680892,0.00000000001217447223,-0.00080801166881634624,0.00010017491970426730,0.00090818658852063040,0.00046971973993592108,0.00102080344309411764,0.00000185377676577727,-0.00152407540628241977,-0.99745322747373932337,-0.00000003990011798488,-0.00254677252625980146,-0.00032174240015834209,0.00148857383858670635,0.00000014108249165360,0.00137990118771394899,-0.00000003832859783392,0.00003554898033483923,-0.00102249539574793854,0.04970862443595048391,-0.04974413403385761351,-0.00003550959790718984,-0.00000000105382980659,0.07040923420608655170,-0.00875443616910793858,-0.07916367037519446426,-0.04098436806401786758,0.00102786457890738803,-0.00000533085456162222,-0.00152407547113252552,-1.99745331246628810007,0.99999992166176610020,1.99745331246628787802,0.25234504312049998997,-0.12963276945839960486,-0.00001229517284808339,-0.12016566446662213519,-0.00000000095061764206,-0.00003595518846064210,-0.00000012254489647247,-0.05027992738501509823,0.05031588245808910065,0.00003595507307399877,0.00000000106600427882,-0.07121724587490289859,0.00885461108881220593,0.08007185696371509065,0.04145408780395379300,-0.00000706113581327024,0.00000718463132739949,0.00000000006485010582,0.00000008499254868421,0.00000003843811595800,-1.00000008499254766647,-0.25266678552065829910,0.13112134329698629798,0.00001243625533973699,0.12154556565433607962,0.00000000752466885476,0.00028460559703350342,0.00000096985640617950,0.39799398542604769169,-0.39827859010972443965,-0.00028460468367716381,-0.00000000843802514195,0.56372467087682776032,-0.07008924117276366106,-0.63381391204959136587,-0.32813248696583918740,0.00005589302807157379,-0.00005687040914672282,-0.00000000074518224819,-0.00000097663585448329,-0.00000000000003830274,0.00000097663585448329,1.00000012338171573312,-1.03789939061740121851,-0.00009843997562961298,-0.96210170940020767194,0.00000000752466885476,0.00028460559703350342,0.00000096985640617950,0.39799398542604769169,-0.39827859010972443965,-0.00028460468367716381,-0.00000000843802514195,0.56372467087682776032,-0.07008924117276366106,-0.63381391204959136587,-0.32813248696583918740,0.00005589302807157379,-0.00005687040914672282,-0.00000000074518224819,-0.00000097663585448329,-0.00000000000003830274,0.00000097663585448329,0.00000012338171574499,-0.03789939061740121851,-0.00009843997562961298,-0.96210170940020767194,0.00000001534574305226,0.00058042213519445462,0.00000197791656936550,0.81166541074153120139,-0.81224583101403469154,-0.00058042027250362167,-0.00000001720843377911,1.14965510356285238736,-0.14293937800128947435,-1.29259448156414236131,-0.66919048921219559389,0.00011398774667093951,-0.00011598100898359136,-0.00000000151971808044,-0.00000199174251622299,-0.00000000000007811426,0.00000199174251622299,0.00000025162357888638,-0.03790053396596568952,0.99979924238511475032,0.03789829059979247378,-0.00000000782107419750,-0.00029581653816095120,-0.00000100806016318600,-0.41367142531548345419,
         0.41396724090431025189,0.00029581558882645781,0.00000000877040863716,-0.58593043268602473805,0.07285013682852581329,0.65878056951455088441,0.34105800224635646201,-0.00005809471859936572,0.00005911059983686854,0.00000000077453583224,0.00000101510666173969,0.00000000000003981153,-0.00000101510666173969,-0.00000012824186314139,-0.99999885665143550817,0.00010231763925560670,-0.00000000000000022204;
    //std::cout << "S matrix: \n\n" << S.transpose() << std::endl;
    return S.transpose();

   }


MyMat_G PrepareGainStage_Knob(float gain_pot, Gain_Data& G_d)
{
    Matrix<double, 21, 9> B_v_T; //cannot be initialized in G_d since << operator gives problem and = does not work with Eigen's matrix but only with Eigen's vectors
    B_v_T << 0, 1, 0, 0, 1, 1, 0, 0, 1,
             0, 1, 0,-1, 1, 0, 0,-1, 0,
             0, 0, 0, 1, 0, 1, 0, 1, 1,
            -1, 1, 0,-1, 1, 0, 0,-1, 0,
            -1, 1, 0, 0, 0, 0, 0, 0, 0,
             1, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 1, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 1, 0, 0, 0, 0,-1, 0,
             0, 0,-1,-1, 1, 0, 0, 0, 0,
             0, 0, 1, 0, 0, 0, 0, 0, 0,
             0, 0, 0,-1, 1, 0, 0, 0, 0,
             0, 0, 0, 1, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 1, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 1, 0, 1, 1,
             0, 0, 0, 0, 0, 1, 1, 0, 0,
             0, 0, 0, 0, 0, 1, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 1, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 1, 1,
             0, 0, 0, 0, 0, 0, 0, 1, 1,
             0, 0, 0, 0, 0, 0, 0, 1, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 1;

    Matrix<double, 9, 21> B_v = B_v_T.transpose();

    Matrix<double, 21, 9> B_i_T;
    B_i_T << 0, 1, 0, 0, 1, 1, 1,-1, 0,
             0, 1, 0,-1, 1, 0, 0,-1, 0,
             0, 0, 0, 1, 0, 1, 1, 0, 0,
            -1, 1, 0,-1, 1, 0, 0,-1, 0,
            -1, 1, 0, 0, 0, 0, 0, 0, 0,
             1, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 1, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 1, 0, 0, 0, 0,-1, 0,
             0, 0,-1,-1, 1, 0, 0, 0, 0,
             0, 0, 1, 0, 0, 0, 0, 0, 0,
             0, 0, 0,-1, 1, 0, 0, 0, 0,
             0, 0, 0, 1, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 1, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 1, 1, 0, 0,
             0, 0, 0, 0, 0, 1, 1, 0, 0,
             0, 0, 0, 0, 0, 1, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 1, 0, 0,
             0, 0, 0, 0, 0, 0, 1, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 1, 1,
             0, 0, 0, 0, 0, 0, 0, 1, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 1;


    int index = int(gain_pot*100); //find the correct z21 pre-computed parameter for S computation
    double Rpot = 100e3;

    //G_d.Ra_neg = Rpot * gain_pot; //dummy
    G_d.Ra_pos = Rpot*(std::pow(2,gain_pot) - 0.999); //exp,
    G_d.Ra_neg = Rpot - G_d.Ra_pos;
    G_d.Rb_neg = G_d.Ra_pos;
    G_d.Rb_pos = G_d.Ra_neg;

    //update adaptor S3P3 connected to S depending on gain pot values
    //S3
    G_d.Z2_S3 = G_d.Ra_neg;
    G_d.Z1_S3 = G_d.Z2_S3 + G_d.Z3_S3;
    G_d.alpha_S3 = 2 * G_d.Z3_S3 / (G_d.Z1_S3 + G_d.Z2_S3 + G_d.Z3_S3);


    G_d.S_S3_2 = { -1 + G_d.alpha_S3, G_d.alpha_S3, -1 + G_d.alpha_S3 };
    G_d.S_S3_3 = { -G_d.alpha_S3, -G_d.alpha_S3, 1 - G_d.alpha_S3 };

    //S3P3
   //G_d.Z2_S3P3 = G_d.Z1_P3;
   G_d.Z3_S3P3 = G_d.Z1_S3;
   G_d.Z1_S3P3 = G_d.Z2_S3P3 + G_d.Z3_S3P3;
   G_d.alpha_S3P3 = (2 * G_d.Z3_S3P3) / (G_d.Z1_S3P3 + G_d.Z2_S3P3 + G_d.Z3_S3P3);

   G_d.S_S3P3_2 = { -1 + G_d.alpha_S3P3, G_d.alpha_S3P3, -1 + G_d.alpha_S3P3 };
   G_d.S_S3P3_3 = { -G_d.alpha_S3P3, -G_d.alpha_S3P3, 1 - G_d.alpha_S3P3 };

   //update single elements (resistances) connected directly to S and their Z

   G_d.Z15 = G_d.Ra_pos;
   G_d.ZS3 = G_d.Ra_neg + G_d.R10;
   G_d.Z4 = G_d.Rb_pos;
   G_d.Z5 = G_d.Rb_neg;


   //extract the correct z21
   G_d.z21 = G_d.Z21_99_pot_log[index];
   //compute S matrix

   Matrix <double, 21, 1> vectorZ;
   vectorZ << G_d.Z1, G_d.Z2, G_d.Z3, G_d.Z4, G_d.Z5, G_d.Z6, G_d.Z7, G_d.Z8, G_d.Z9, G_d.Z10, G_d.Z11, G_d.Z12, G_d.Z13, G_d.Z14, G_d.Z15, G_d.Z16, G_d.Z17, G_d.Z18, G_d.Z19, G_d.Z20, G_d.z21;
   MatrixXd Z;
   Z = vectorZ.asDiagonal();
   MyMat_G S;
   S << G_d.I - (2 * Z * (B_i_T * ((B_v * Z * B_i_T).inverse()) * B_v));

   return S;

}



float GainStageSample(const float inputSample, const MyMat_G& S, Gain_Data& G_d)
{


    G_d.a[0] = inputSample; // Vs + Rs //----------------------------- [-1:1]
    G_d.a[2] = G_d.b[2]; // C3
    G_d.a[3] = 0; // Rb +
    G_d.a[4] = 0; // Rb -
    G_d.a[6] = -4.5; // Rg
    G_d.a[9] = 0; // R16
    G_d.a[10] = 0; // R19
    G_d.a[11] = 0; // R7
    G_d.a[12] = G_d.b[12]; // C16
    G_d.a[14] = 0; // Ra +
    G_d.a[15] = -4.5; // Rg
    G_d.a[19] = G_d.b[19]; // C10

    //--------- FORWARD SCAN --------------//

    //---- Series Junction ----//

    // S1

    G_d.a_S1[2] = 0; // R15
    G_d.a_S1[1] = G_d.b_S1[1]; // C11
    // waves reflected from first layer of adaptor
    G_d.b_S1[0] = G_d.S_S1_1 * G_d.a_S1;


    // S2

    G_d.a_S2[2] = 0; // R13
    G_d.a_S2[1] = G_d.b_S2[1]; // C9
    // waves reflected from first layer of adaptor
    G_d.b_S2[0] = G_d.S_S2_1 * G_d.a_S2;

    // S3

    G_d.a_S3[2] = 0; // R10
    G_d.a_S3[1] = 0; // Ra_neg
    // waves reflected from first layer of adaptor
    G_d.b_S3[0] = G_d.S_S3_1 * G_d.a_S3;

    //---- Series Attached to Parallel Junction ----//

    // S_P2

    G_d.a_S_P2[2] = 0; // R9
    G_d.a_S_P2[1] = G_d.b_S_P2[1]; // C6
    // waves reflected from first layer of adaptor
    G_d.b_S_P2[0] = G_d.S_S_P2_1 * G_d.a_S_P2;

    // S_P5

    G_d.a_S_P5[2] = 0; // R18
    G_d.a_S_P5[1] = G_d.b_S_P5[1]; // C12
    // waves reflected from first layer of adaptor
    G_d.b_S_P5[0] = G_d.S_S_P5_1 * G_d.a_S_P5;

    //---- Parrallel Attached to Series Junction ----//

    // P5

    G_d.a_P5[1] = 0; // R17
    G_d.a_P5[2] = G_d.b_S_P5[0]; // wave refl.by SP5 port 1
    G_d.b_P5[0] = G_d.S_P5_1 * G_d.a_P5;

    // P2

    G_d.a_P2[1] = 0; // R8
    G_d.a_P2[2] = G_d.b_S_P2[0]; // wave refl.by SP2 port 1
    G_d.b_P2[0] = G_d.S_P2_1 * G_d.a_P2;

    //--------- Parallel adaptors -------------//

    // P1

    G_d.a_P1[1] = G_d.b_P1[1]; // C4
    G_d.a_P1[2] = 0; // R5
    G_d.b_P1[0] = G_d.S_P1_1 * G_d.a_P1;

    // P3

    G_d.a_P3[1] = G_d.b_P3[1]; // C7
    G_d.a_P3[2] = 0;// R11
    G_d.b_P3[0] = G_d.S_P3_1 * G_d.a_P3;

    // P4

    G_d.a_P4[1] = G_d.b_P4[1]; // C8
    G_d.a_P4[2] = 0; // R12
    G_d.b_P4[0] = G_d.S_P4_1 * G_d.a_P4;

    // P6

    G_d.a_P6[1] = G_d.b_P6[1]; // C5
    G_d.a_P6[2] = 0; // R6
    G_d.b_P6[0] = G_d.S_P6_1 * G_d.a_P6;

    //------------ Series junction S3 + P3 -----------//

    // S3P3

    G_d.a_S3P3[2] = G_d.b_S3[0]; // S3 = Ra_neg + R10
    G_d.a_S3P3[1] = G_d.b_P3[0]; // P3 = R11//C7
    // waves reflected from first layer of adaptor
    G_d.b_S3P3[0] = G_d.S_S3P3_1 * G_d.a_S3P3;


    // waves reflected from series / parallel adaptors, incident toward S

    G_d.a[1] = G_d.b_P1[0];
    G_d.a[5] = G_d.b_P2[0];
    G_d.a[7] = G_d.b_S1[0];
    G_d.a[8] = G_d.b_P5[0];
    G_d.a[13] = G_d.b_P6[0];
    G_d.a[16] = G_d.b_S3P3[0];
    G_d.a[17] = G_d.b_P4[0];
    G_d.a[18] = G_d.b_S2[0];

    // Scattering stage

    G_d.b = S * G_d.a;
    G_d.a[20] = G_d.diode.Solve(G_d.b[20], G_d.z21);

    //--------- BACKWARD SCAN --------------//

    // Series S3 + P3 = S3P3

    G_d.a_S3P3[0] = G_d.b[16]; // from S
    G_d.b_S3P3[1] = G_d.S_S3P3_2 * G_d.a_S3P3;
    G_d.b_S3P3[2] = G_d.S_S3P3_3 * G_d.a_S3P3;

    //----------- Series -------------//

    // S1

    G_d.a_S1[0] = G_d.b[7]; // from S
    G_d.b_S1[1] = G_d.S_S1_2 * G_d.a_S1;
    G_d.b_S1[2] = G_d.S_S1_3 * G_d.a_S1;

    // S2

    G_d.a_S2[0] = G_d.b[18]; // from S
    G_d.b_S2[1] = G_d.S_S2_2 * G_d.a_S2;
    G_d.b_S2[2] = G_d.S_S2_3 * G_d.a_S2;

    // S3

    G_d.a_S3[0] = G_d.b_S3P3[2]; // from S3P3
    G_d.b_S3[1] = G_d.S_S3_2 * G_d.a_S3;
    G_d.b_S3[2] = G_d.S_S3_3 * G_d.a_S3;

    //----------- Parallel -------------//

    // P1

    G_d.a_P1[0] = G_d.b[1]; // from S
    G_d.b_P1[1] = G_d.S_P1_2 * G_d.a_P1;
    G_d.b_P1[2] = G_d.S_P1_3 * G_d.a_P1;

    // P3

    G_d.a_P3[0] = G_d.b_S3P3[1]; // from S3P3
    G_d.b_P3[1] = G_d.S_P3_2 * G_d.a_P3;
    G_d.b_P3[2] = G_d.S_P3_3 * G_d.a_P3;

    // P4

    G_d.a_P4[0] = G_d.b[17]; // from S
    G_d.b_P4[1] = G_d.S_P4_2 * G_d.a_P4;
    G_d.b_P4[2] = G_d.S_P4_3 * G_d.a_P4;

    // P6

    G_d.a_P6[0] = G_d.b[13]; // from S
    G_d.b_P6[1] = G_d.S_P6_2 * G_d.a_P6;
    G_d.b_P6[2] = G_d.S_P6_3 * G_d.a_P6;

    //------ parallel attached to series -----//

    // P2

    G_d.a_P2[0] = G_d.b[5]; // from S
    G_d.b_P2[1] = G_d.S_P2_2 * G_d.a_P2;
    G_d.b_P2[2] = G_d.S_P2_3 * G_d.a_P2;

    // P5

    G_d.a_P5[0] = G_d.b[8]; // from S
    G_d.b_P5[1] = G_d.S_P5_2 * G_d.a_P5;
    G_d.b_P5[2] = G_d.S_P5_3 * G_d.a_P5;

    //------- series attached to parallel ------//

    // S_P2

    G_d.a_S_P2[0] = G_d.b_P2[2];
    // waves reflected from S_P52to linear, adapted 2 - port elements
    G_d.b_S_P2[1] = G_d.S_S_P2_2 * G_d.a_S_P2;
    G_d.b_S_P2[2] = G_d.S_S_P2_3 * G_d.a_S_P2;

    // S_P5

    // wave incident to S_P5 from P5
    G_d.a_S_P5[0] = G_d.b_P5[2];
    //waves reflected from S_P5 to linear, adapted 2 - port elements
    G_d.b_S_P5[1] = G_d.S_S_P5_2 * G_d.a_S_P5;
    G_d.b_S_P5[2] = G_d.S_S_P5_3 * G_d.a_S_P5;

    // Read Output

    double outputSample =  ((-(G_d.a[10] + G_d.b[10] + G_d.a[12] + G_d.b[12]) / 2));
    return outputSample; //(2*((outputSample - m)/(M-m)) -1);
}
